#!/usr/bin/env bash
# To implement this command, edit the "Command implementation" section below. 

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
# 
#/ command: waitfor:check-result: "wait for the check return the result"
#/ usage: rerun waitfor:check-result  --interval <30>  --maxtry <10>  --check <>  --result <>  --negative <false> 

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
# shellcheck source=lib/functions.sh
. $RERUN_MODULE_DIR/lib/functions.sh check-result || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: waitfor:check-result. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: INTERVAL MAXTRY CHECK RESULT NEGATIVE

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting 
# one the corresponding option variables.

rerun_options_parse "$@"


# Command implementation
# ----------------------

# - - -
# Put the command implementation here.
# - - -
NEGATIVE=$(echo "${NEGATIVE}" | tr '[:upper:]' '[:lower:]')
[[ "${NEGATIVE}" = "true" ]] || NEGATIVE=false
declare -i count=0 max=${MAXTRY} sleep=${INTERVAL}

# Keep checking for pattern until we reach max.
while (( count <= max ))
do
    # if success break else print a . and do another loop
    result_check=$(eval "${CHECK}")
    if [[ "${NEGATIVE}" == "false" ]]
    then
        [[ "${result_check}" == "${RESULT}" ]] && break || printf >&2 "."
    else
        [[ "${result_check}" != "${RESULT}" ]] && break || printf >&2 "."
    fi
    # increment attempts counter.
    (( count += 1 ))

    # error out if reached max attempts.
    (( count == max )) && {
        rerun_die 1 "FAIL: Reached max attempts to wait the correct result ${RESULT}. Exiting."
    }
    # wait interval before trying again.
    sleep "${sleep}"
done

# Done. Exit with last command exit status.
exit $?

